Prerequisites:
- .NET Core 2.0 SDK is required on whichever platform you are using.

About the Code:

- QuarticRuleEngine directory contains code for the class library and QuarticRuleEngineApp directory contains code for the test application that uses the RulesEngine class.
- The code is extensible to add more data types if necessary. Have used a list of dictionaries, one for each data type, which map from signal value to a set of rules.
- Have used .NET Lambda expression trees to increase performance.
- The runtime performance depends on the rules and will vary. Worst case O(number_of_data_items*number_of_rules_per_signal). Since I'm using dictionaries, lookup is constant time.
- If I had more time, I would make the code more extensible and improve the algorithm by using either the Rete algorithm or Collection-Oriented Match.

How to build and run:

cd QuarticRuleEngineApp
dotnet clean
dotnet run

How to add/remove rules:
- Edit the file RulesCollection.xml in QuarticRuleEngineApp directory and clean and run. Cleaning is important as otherwise the modified XML file is not copied over to the execution directory.

How to change input JSON data:
- Edit the file raw_data.json int QuarticRuleEngineApp directory and clean and run. Rebuilding is important as otherwise the modified JSON file is not copied over to the execution directory.
