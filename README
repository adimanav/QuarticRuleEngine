Prerequisites:
- .NET Core 2.0 SDK is required on whichever platform you are using.

About the Code:

- QuarticRuleEngine directory contains code for the class library and QuarticRuleEngineApp directory contains code for the test application that uses the RulesEngine class.
- RulesEngine is the class of entry. RuleEngine instantiates RulesManager. RulesManager keeps an in memory repository of all the rules. Rules can be added, refreshed and obtained as needed.
- RulesManager uses RulesParser to parse the rules file and populate itself. RulesEngine then uses InputFileParser to get the input data and runs the applicable rules on the data.
- Have used .NET Lambda expression trees to increase performance. RulesManager compiles and store a lambda expression for each rule and runs it on the data.
- More data types can be added if necessary. Any .NET data type can be added easily. More operators can also be added. One can get currently supported operators by looking at the ExpressionType .NET class.
- The runtime performance depends on the rules and will vary. Worst case O(number_of_data_items*number_of_rules_per_signal). Since I'm using dictionaries, lookup is constant time.
- If I had more time, 
  - I would make the code more extensible.
  - I would serialize the precompiled lambda expressions to disk and fetch them on re-initialization. That time can be cut down if the rules are not modified.
  - Finally, and this is a big one, I would improve the algorithm by using either the Rete algorithm or Collection-Oriented Match, both complicated algorithms.

How to build and run:

cd QuarticRuleEngineApp
dotnet clean
dotnet run

How to add/remove rules:
- Edit the file RulesCollection.xml in QuarticRuleEngineApp directory and clean and run. Cleaning is important as otherwise the modified XML file is not copied over to the execution directory.

How to change input JSON data:
- Edit the file raw_data.json int QuarticRuleEngineApp directory and clean and run. Rebuilding is important as otherwise the modified JSON file is not copied over to the execution directory.
